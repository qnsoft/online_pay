package main

import (
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/json"
	"encoding/pem"
	"fmt"
	"strings"
	"time"
	_ "github.com/qnsoft/online_pay/routers"
	"github.com/qnsoft/online_pay/utils/pay/easypay"
	"github.com/qnsoft/utils/DateHelper"
	"github.com/qnsoft/utils/ErrorHelper"
	"github.com/qnsoft/utils/WebHelper"

	"github.com/astaxie/beego"
	"github.com/satori/go.uuid"
	"github.com/wenzhenxi/gorsa"
)

func main() {
	//----------------------------工易付S101商户信息提交--------------------
	// _model_101 := GongYiFu.Model_101{
	// 	MerchName:    "河南联九舟网络科技有限公司",
	// 	Name:         "宋晓辉",
	// 	Phone:        "13938202388",
	// 	IdNo:         "410185198209190514",
	// 	MerchAddress: "郑州市郑汴路环球大厦B座2303",
	// 	CardId:       "6214623121001278490",
	// 	FeeRate:      "45",  //费率0.68%
	// 	ExternFee:    "100", //手续费单位分
	// 	Remark:       "",
	// }
	// _model_rt_101 := GongYiFu.Gyf_S101(_model_101)
	// _str_json_101, _ := json.Marshal(_model_rt_101)
	// fmt.Print("%s", string(_str_json_101))
	// // ----------------------------工易付S102商户信息提交--------------------
	// _model_102 := GongYiFu.Model_102{
	// 	SubMerchId: "SMCH10470212909113",
	// 	Phone:      "15638905677",
	// 	CardId:     "6226223001466633",
	// }
	// _model_rt_102 := GongYiFu.Gyf_S102(_model_102)
	// _str_json_102, _ := json.Marshal(_model_rt_102)
	// fmt.Print("%s", string(_str_json_102))
	// // ----------------------------工易付S103.商户修改费率--------------------
	// _model_103 := GongYiFu.Model_103{
	// 	SubMerchId: "SMCH10470212909113",
	// 	FeeRate:    "58",
	// 	ExternFee:  "100",
	// }
	// _model_rt_103 := GongYiFu.Gyf_S103(_model_103)
	// _str_json_103, _ := json.Marshal(_model_rt_103)
	// fmt.Print("%s", string(_str_json_103))
	// ----------------------------工易付S201.银联绑卡--------------------
	// _OrderId := date.FormatDate(time.Now(), "yyMMddHHmmss") + StringHelper.GetRandomNum(4)
	// _model_201 := GongYiFu.Model_201{
	// 	SubMerchId: "SMCH10470212929804",                                         //商户编号
	// 	Name:       "宋晓辉",                                                        //法人姓名
	// 	Phone:      "13938202388",                                                //法人电话
	// 	IdNo:       "410185198209190514",                                         //身份证号
	// 	CardId:     "6214623121001278490",                                        //交易卡号
	// 	NotifyUrl:  "http://cgi.weiyifu123.com/cgi-bin/nps/cps_pay_callback.cgi", //异步通知地址
	// 	FrontUrl:   "www.baidu.com",                                              //页面通知地址
	// 	OrderId:    _OrderId,                                                     //请求流水号
	// 	DeviceId:   "358588070801255",                                            //设备ID 安卓:IMEI，iOS:IDFV，PC:硬盘序列号（若不填大额交易限额会被银联风控）
	// 	IpAddress:  "39.97.111.217",                                              //请求IP地址 公网IP地址（若不填大额交易限额会被风控）（付款客户端IP）
	// }
	// _model_rt_201 := GongYiFu.Gyf_S201(_model_201)
	// _str_json_201, _ := json.Marshal(_model_rt_201)
	// fmt.Print("%s", string(_str_json_201))
	//--------------------------S301订单查询接口-------------------
	// _model_301 := GongYiFu.Model_301{
	// 	OrderId: "1909290916278874",
	// 	//SubMerchId: "SMCH99990212558313",
	// }
	// str_301 := GongYiFu.Gyf_S301(_model_301)

	// // 	if _b_ret != nil && len(_b_ret.Code) > 0 {
	// // 		if _b_ret.Code == "0000" {
	// // 			return map[string]interface{}{"status": 0, "msg": _b_ret.Msg, "ret_data": _b_ret.Data, "json": _b_json}
	// // 		}
	// // 		return map[string]interface{}{"status": 1, "msg": _b_ret.Msg, "ret_data": _b_ret.Data, "json": _b_json}
	// // 	}
	// // }
	// // return map[string]interface{}{"status": 1, "msg": "解密失败", "json": _json}

	// fmt.Print("%#v", str_301)
	//--------------------------S302.落地云闪付支付接口-------------------
	// _OrderId := date.FormatDate(time.Now(), "yyMMddHHmmss") + StringHelper.GetRandomNum(4)
	// _model_302_A := GongYiFu.Model_302_A{
	// 	SubMerchId: "SMCH10470212929804",
	// 	OrderId:    _OrderId,
	// 	Name:       "宋晓辉",
	// 	Phone:      "13938202388",
	// 	IdNo:       "410185198209190514",
	// 	CardId:     "6225768311530149",
	// 	NotifyUrl:  "http://cgi.weiyifu123.com/cgi-bin/nps/cps_pay_callback.cgi",
	// 	Amount:     "5",
	// 	GoodsName:  "淘客商城订单",
	// 	CardType:   "2",
	// 	Cvv:        "999",
	// 	ExpDate:    "1120",
	// 	DeviceId:   "358588070801255", //设备ID 安卓:IMEI，iOS:IDFV，PC:硬盘序列号（若不填大额交易限额会被银联风控）
	// 	IpAddress:  "39.97.111.217",   //请求IP地址 公网IP地址（若不填大额交易限额会被风控）（付款客户端IP）
	// }
	// _model_rt_302_A := GongYiFu.Gyf_S302_A(_model_302_A)
	// _str_json_302_A, _ := json.Marshal(_model_rt_302_A)
	// fmt.Print("%s", string(_str_json_302_A))

	//----------------------------S501.地区编码查询--------------------
	//str_501 := GongYiFu.Gyf_S501()
	//fmt.Print("%+v", str_501)

	// beego.ErrorHandler("404", page_not_found)
	// beego.ErrorHandler("401", page_note_permission)

	//-----------------易宝支付--------------------------//

	var _rt interface{}
	_http_url := "https://yos.yeepay.com/yop-center/yos/v1.0/sys/merchant/qual/upload"
	//_timestamp := time.Now().UTC().Format("2006-01-02T15:04:05-0700")
	t1, _ := date.ParseAny(date.FormatDate(time.Now(), "yyyy-MM-dd HH:mm:ss"))
	_timestamp := t1.UTC().Format("2006-01-02T15:04:05+08:00")
	//定义主机头对象
	_HeaderData := map[string]string{}
	/*-----------主机头必填项-------------*/
	//_HeaderData["Host"] = "openapi.yeepay.com"
	//_HeaderData["content-type"] = "application/x-www-form-urlencoded; charset=utf-8"
	_HeaderData["x-yop-date"] = _timestamp //t1.UTC().Format(time.RFC3339)
	_request_uuid, _ := uuid.NewV4()
	_request_uuid_id := fmt.Sprintf("%s", _request_uuid)
	_request_uuid_id_a := strings.Replace(_request_uuid_id, "-", "", -1)
	_HeaderData["x-yop-request-id"] = _request_uuid_id_a
	_HeaderData["x-yop-sdk-version"] = "3.2.12"
	_HeaderData["x-yop-sdk-langs"] = "go"

	_HeaderDataToSignSet := make([]string, 0)
	_HeaderDataToSignSet = append(_HeaderDataToSignSet, "x-yop-request-id")
	_HeaderDataToSignSet = append(_HeaderDataToSignSet, "x-yop-date")
	// if EasyPay.CustomerNo != "" {
	_HeaderData["x-yop-appkey"] = EasyPay.AppKey
	_HeaderDataToSignSet = append(_HeaderDataToSignSet, "x-yop-appkey")
	// } else {
	// 	_HeaderData["x-yop-customerid"] = EasyPay.AppKey
	// 	_HeaderDataToSignSet = append(_HeaderDataToSignSet, "x-yop-customerid")
	// }
	_authString := "yop-auth-v2" + "/" + EasyPay.AppKey + "/" + _timestamp + "/" + "1800"
	_HTTPRequestMethod := "POST"
	_CanonicalURI := "/yos/v1.0/sys/merchant/qual/upload"
	//定义请求对象
	_Params := make(map[string]interface{})
	// _Params["appKey"] = EasyPay.AppKey
	_Params["fileType"] = "IMAGE"
	// _Params["locale"] = "zh_CN"
	_Params["merQual"] = "D:\\MyCode\\zfb_app-2019-08-23\\static\\img\\jingdong.png"
	// _Params["method"] = _CanonicalURI
	// _ts := time.Now().UnixNano() / 1e6
	// _Params["ts"] = strconv.FormatInt(_ts, 10) //"1572581574597"
	// _Params["v"] = "1.0"
	_CanonicalQueryString := EasyPay.GetCanonicalQueryString(_Params) //处理请求对象

	_HeadersToSign := EasyPay.GetHeadersToSign(_HeaderData, _HeaderDataToSignSet)

	_CanonicalHeader := EasyPay.GetCanonicalHeaders(_HeadersToSign)

	_SignedHeaders := ""
	if len(_HeaderDataToSignSet) > 0 {
		for _key, _ := range _HeadersToSign {
			if _SignedHeaders == "" {
				_SignedHeaders += ""
			} else {
				_SignedHeaders += ";"
			}
			_SignedHeaders += _key
		}
		_SignedHeaders = strings.ToLower(_SignedHeaders)
	}
	_CanonicalRequest := _authString + "\n" + _HTTPRequestMethod + "\n" + _CanonicalURI + "\n" + _CanonicalQueryString + "\n" + _CanonicalHeader
	fmt.Println("CanonicalRequest内容：", _CanonicalRequest)
	fmt.Println("CanonicalHeader内容：", _CanonicalHeader)
	//_SignToBase64, _ := Rsa_Sign([]byte(_CanonicalRequest), EasyPay.PrivateKey)
	_SignToBase64, _ := Sign(_CanonicalRequest, EasyPay.PrivateKey)
	fmt.Println("SignToBase64：", _SignToBase64)
	//_SignToBase64_A := base64.URLEncoding.EncodeToString([]byte(_SignToBase64))
	//fmt.Println("url加密：", _SignToBase64_A)

	_Signature := Base64UrlEncode(_SignToBase64) + "$SHA256"
	fmt.Println("Signature签名内容：", _Signature)
	_Authorization := "YOP-RSA2048-SHA256 " + _authString + "/" + _SignedHeaders + "/" + _Signature
	fmt.Println("Authorization内容：", _Authorization)
	_HeaderData["Authorization"] = _Authorization
	_HeaderData["Accept"] = "*/*"
	_HeaderData["Content-Type"] = "multipart/form-data; boundary=---------------------------1000"
	//_HeaderData := map[string]string{"Accept-Charset": "utf-8", "Content-Type": "application/x-www-form-urlencoded"}
	_req := WebHelper.HttpPost(_http_url, _HeaderData, _Params)
	fmt.Println(_req)
	err := json.Unmarshal([]byte(_req), &_rt)
	ErrorHelper.CheckErr(err)

	beego.Run()
}

// func page_not_found(rw http.ResponseWriter, r *http.Request) {
// 	t, _ := template.New("404.html").ParseFiles("views/404.html")
// 	data := make(map[string]interface{})

// 	//data["content"] = "page not found"
// 	t.Execute(rw, data)
// }

// func page_note_permission(rw http.ResponseWriter, r *http.Request) {
// 	t, _ := template.New("401.html").ParseFiles("views/401.html")
// 	data := make(map[string]interface{})
// 	//data["content"] = "你没有权限访问此页面，请联系超级管理员。或去<a href='/'>开启我的OPMS之旅</a>。"
// 	t.Execute(rw, data)
// }

// /*
// 私钥加密
// */
// func Rsa_Encode(data, _privateKey []byte) (string, error) {
// 	_srt, errrt := gorsa.PriKeyEncrypt(string(data), string(_privateKey))
// 	return _srt, errrt
// 	//return []byte(_srt), errrt

// }

// /*
// 公钥解密
// */
// func Rsa_Decode(encrypted, _publicKey []byte) ([]byte, error) {
// 	_srt, errrt := gorsa.PublicDecrypt(string(encrypted), string(_publicKey))
// 	return []byte(_srt), errrt
// }
/*
私钥签名
*/
func Rsa_Sign(data, _privateKey []byte) (string, error) {
	_str_content := string(data)
	_str_privateKey := string(_privateKey)
	fmt.Println("rsa原始内容：", _str_content)
	_srt, errrt := gorsa.SignSha256WithRsa(_str_content, _str_privateKey)
	return _srt, errrt
}

func Sign(data string, _privateKey []byte) (string, error) {
	h := sha256.New()
	h.Write([]byte(data))
	hashed := h.Sum(nil)
	//获取私钥
	block, _ := pem.Decode(_privateKey)
	//解析PKCS1格式的私钥
	priv, _ := x509.ParsePKCS1PrivateKey(block.Bytes)
	signByte, err := rsa.SignPKCS1v15(rand.Reader, priv, crypto.SHA256, hashed)
	sign := base64.StdEncoding.EncodeToString(signByte)
	return sign, err
	// block, _ := pem.Decode(_privateKey)
	// privateKey, _ := x509.ParsePKCS1PrivateKey(block.Bytes)
	// sha256Hash := sha256.New()
	// s_data := []byte(data)
	// sha256Hash.Write(s_data)
	// hashed := sha256Hash.Sum(nil)

	// signByte, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, hashed)
	// sign := base64.StdEncoding.EncodeToString(signByte)
	// // decoded, _ := base64.StdEncoding.DecodeString(sign)
	// // fmt.Println(string(decoded))
	// return sign, err
}

func Base64UrlEncode(s string) string {
	s = strings.Split(s, "=")[0]
	s = strings.Replace(s, "+", "-", -1)
	s = strings.Replace(s, "/", "_", -1)
	return s
}
